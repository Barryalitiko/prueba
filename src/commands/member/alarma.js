const { PREFIX } = require("../../config");

module.exports = {
  name: "alarma",
  description: "Configura una alarma y notifica cuando se active.",
  commands: ["alarma", "alarm"],
  usage: `${PREFIX}alarma <duraci√≥n en minutos>`,
  handle: async ({ args, sendReply, sendSuccessReact }) => {
    try {
      // Verificar que el usuario proporcion√≥ un tiempo
      if (!args.length || isNaN(args[0])) {
        return await sendReply("‚ùå Debes especificar la duraci√≥n en minutos. Ejemplo: !alarma 10");
      }

      // Convertir la duraci√≥n a un n√∫mero
      const durationMinutes = parseInt(args[0]);

      // Registrar la hora actual
      const now = new Date();
      const startTime = now.toLocaleTimeString("es-ES");

      // Calcular la hora de finalizaci√≥n
      const alarmTime = new Date(now.getTime() + durationMinutes * 60000); // A√±adir los minutos
      const endTime = alarmTime.toLocaleTimeString("es-ES");

      // Confirmar la configuraci√≥n de la alarma
      await sendReply(
        `‚è∞ Alarma configurada.\n\n- **Hora de inicio:** ${startTime}\n- **Duraci√≥n:** ${durationMinutes} minutos\n- **Hora de finalizaci√≥n:** ${endTime}`
      );

      // Enviar una notificaci√≥n cuando termine la alarma
      setTimeout(async () => {
        await sendReply(`üîî ¬°Alarma activada! Han pasado ${durationMinutes} minutos desde ${startTime}.`);
        await sendSuccessReact(); // React de √©xito al finalizar
      }, durationMinutes * 60000); // Esperar el tiempo especificado
    } catch (error) {
      console.error("Error al configurar la alarma:", error);
      await sendReply("‚ùå Hubo un problema al configurar la alarma. Int√©ntalo de nuevo.");
    }
  },
};